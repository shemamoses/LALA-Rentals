datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Roles
enum Role {
  HOST
  RENTER
}

// Booking status
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

// User model
model User {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Basic info
  name        String
  email       String     @unique
  password    String?    // If direct login is supported
  googleId    String?    // If using Google OAuth
  role        Role       @default(RENTER) // Optional default

  // Relationships
  properties  Property[]
  bookings    Booking[]

  // Soft delete (optional)
  isActive    Boolean    @default(true)
}

// Property model
model Property {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Basic info
  title       String
  description String
  // Use Decimal for currency
  price       Decimal    @db.Decimal(10, 2)
  // If you'll frequently filter by location, consider indexing
  location    String
  // 'images' as separate table or as array
  // images   Image[] // if separate model
  images      String[]  // if just storing URLs

  // Owner relationship
  ownerId     Int
  owner       User       @relation(fields: [ownerId], references: [id])

  // Bookings
  bookings    Booking[]

  // Soft delete or availability
  isActive    Boolean    @default(true)
}

// Booking model
model Booking {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  startDate   DateTime
  endDate     DateTime
  status      BookingStatus  @default(PENDING)

  // Relationship to the property being booked
  propertyId  Int
  property    Property       @relation(fields: [propertyId], references: [id])

  // Relationship to the user (renter)
  renterId    Int
  renter      User           @relation(fields: [renterId], references: [id])

  // Possibly store price at booking time if you want to
  // keep a record even if the property price changes later
  totalPrice  Decimal?       @db.Decimal(10, 2)
}
